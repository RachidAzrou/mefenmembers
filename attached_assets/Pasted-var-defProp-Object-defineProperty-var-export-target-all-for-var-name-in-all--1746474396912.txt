var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
  deletedMemberNumbers: () => deletedMemberNumbers,
  insertDeletedMemberNumberSchema: () => insertDeletedMemberNumberSchema,
  insertMemberSchema: () => insertMemberSchema,
  insertUserSchema: () => insertUserSchema,
  members: () => members,
  users: () => users
});
import { pgTable, text, serial, integer, timestamp, boolean, date } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  email: text("email").notNull().unique(),
  password: text("password").notNull()
});
var members = pgTable("members", {
  id: serial("id").primaryKey(),
  memberNumber: integer("member_number").notNull().unique(),
  firstName: text("first_name").notNull(),
  lastName: text("last_name").notNull(),
  email: text("email"),
  phoneNumber: text("phone_number").notNull(),
  birthDate: date("birth_date"),
  accountNumber: text("account_number"),
  paymentStatus: boolean("payment_status").notNull().default(false),
  registrationDate: timestamp("registration_date").notNull().defaultNow(),
  notes: text("notes")
});
var deletedMemberNumbers = pgTable("deleted_member_numbers", {
  id: serial("id").primaryKey(),
  memberNumber: integer("member_number").notNull().unique(),
  deletedAt: timestamp("deleted_at").notNull().defaultNow()
});
var insertUserSchema = createInsertSchema(users);
var insertMemberSchema = createInsertSchema(members, {
  registrationDate: z.coerce.date(),
  // Maak lidnummer optioneel bij toevoegen. De server genereert het automatisch als het niet is meegegeven.
  memberNumber: z.number().int().positive().optional(),
  birthDate: z.coerce.date().optional().nullable(),
  accountNumber: z.string().optional().nullable()
});
var insertDeletedMemberNumberSchema = createInsertSchema(deletedMemberNumbers, {
  deletedAt: z.coerce.date(),
  memberNumber: z.number().int().positive()
});

// server/db.ts
import { Pool, neonConfig } from "@neondatabase/serverless";
import { drizzle } from "drizzle-orm/neon-serverless";
import ws from "ws";
neonConfig.webSocketConstructor = ws;
if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?"
  );
}
var pool = new Pool({ connectionString: process.env.DATABASE_URL });
var db = drizzle({ client: pool, schema: schema_exports });

// server/storage.ts
import { eq, sql, asc } from "drizzle-orm";
import session from "express-session";
import connectPg from "connect-pg-simple";
var PostgresSessionStore = connectPg(session);
var DatabaseStorage = class {
  sessionStore;
  constructor() {
    this.sessionStore = new PostgresSessionStore({
      pool,
      createTableIfMissing: true
    });
  }
  // Member operations
  async getMember(id) {
    const [member] = await db.select().from(members).where(eq(members.id, id));
    return member;
  }
  async listMembers() {
    return await db.select().from(members);
  }
  async createMember(member) {
    if (!member.memberNumber) {
      member.memberNumber = await this.generateMemberNumber();
    }
    const preparedMember = {
      firstName: member.firstName,
      lastName: member.lastName,
      phoneNumber: member.phoneNumber,
      memberNumber: member.memberNumber,
      registrationDate: member.registrationDate || /* @__PURE__ */ new Date(),
      email: member.email || null,
      birthDate: member.birthDate ? new Date(member.birthDate) : null,
      accountNumber: member.accountNumber || null,
      paymentStatus: member.paymentStatus || false,
      notes: member.notes || null
    };
    const [created] = await db.insert(members).values(preparedMember).returning();
    return created;
  }
  async updateMember(id, member) {
    const updateObj = {};
    if (member.firstName !== void 0) updateObj.firstName = member.firstName;
    if (member.lastName !== void 0) updateObj.lastName = member.lastName;
    if (member.phoneNumber !== void 0) updateObj.phoneNumber = member.phoneNumber;
    if (member.memberNumber !== void 0) updateObj.memberNumber = member.memberNumber;
    if (member.email !== void 0) updateObj.email = member.email || null;
    if (member.paymentStatus !== void 0) updateObj.paymentStatus = member.paymentStatus;
    if (member.notes !== void 0) updateObj.notes = member.notes || null;
    if (member.registrationDate !== void 0) {
      updateObj.registrationDate = member.registrationDate;
    }
    if (member.birthDate !== void 0) {
      updateObj.birthDate = member.birthDate ? new Date(member.birthDate) : null;
    }
    if (member.accountNumber !== void 0) {
      updateObj.accountNumber = member.accountNumber || null;
    }
    const [updated] = await db.update(members).set(updateObj).where(eq(members.id, id)).returning();
    return updated;
  }
  async deleteMember(id) {
    const member = await this.getMember(id);
    if (member) {
      await db.delete(members).where(eq(members.id, id));
      await this.addDeletedMemberNumber(member.memberNumber);
    }
  }
  async generateMemberNumber() {
    return this.getNextAvailableMemberNumber();
  }
  // Methodes voor het beheren van verwijderde lidnummers
  async addDeletedMemberNumber(memberNumber) {
    const [created] = await db.insert(deletedMemberNumbers).values({ memberNumber }).returning();
    return created;
  }
  async getDeletedMemberNumbers() {
    return await db.select().from(deletedMemberNumbers).orderBy(asc(deletedMemberNumbers.memberNumber));
  }
  async getNextAvailableMemberNumber() {
    const [deletedNumber] = await db.select().from(deletedMemberNumbers).orderBy(asc(deletedMemberNumbers.deletedAt)).limit(1);
    if (!deletedNumber) {
      const result = await db.execute(
        sql`SELECT COALESCE(MAX(${members.memberNumber}), 0) + 1 AS next_number FROM ${members}`
      );
      return result.rows[0]?.next_number || 1;
    }
    await this.removeDeletedMemberNumber(deletedNumber.memberNumber);
    return deletedNumber.memberNumber;
  }
  async removeDeletedMemberNumber(memberNumber) {
    await db.delete(deletedMemberNumbers).where(eq(deletedMemberNumbers.memberNumber, memberNumber));
  }
};
var storage = new DatabaseStorage();

// server/routes.ts
import { fromZodError } from "zod-validation-error";
async function registerRoutes(app2) {
  app2.get("/api/members/generate-number", async (_req, res) => {
    try {
      const rawNumber = await storage.generateMemberNumber();
      const memberNumber = rawNumber.toString().padStart(4, "0");
      res.json({ memberNumber });
    } catch (error) {
      console.error("Error generating member number:", error);
      res.status(500).json({ error: "Failed to generate member number" });
    }
  });
  app2.get("/api/members", async (_req, res) => {
    try {
      const members2 = await storage.listMembers();
      res.json(members2);
    } catch (error) {
      console.error("Error fetching members:", error);
      res.status(500).json({ error: "Failed to fetch members" });
    }
  });
  app2.get("/api/members/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ error: "Invalid ID format" });
      }
      const member = await storage.getMember(id);
      if (!member) {
        return res.status(404).json({ error: "Member not found" });
      }
      res.json(member);
    } catch (error) {
      console.error("Error fetching member:", error);
      res.status(500).json({ error: "Failed to fetch member" });
    }
  });
  app2.post("/api/members", async (req, res) => {
    try {
      const validationResult = insertMemberSchema.safeParse(req.body);
      if (!validationResult.success) {
        const errorMessage = fromZodError(validationResult.error).message;
        return res.status(400).json({ error: errorMessage });
      }
      const rawNumber = await storage.generateMemberNumber();
      const memberNumber = rawNumber;
      const memberData = {
        ...validationResult.data,
        memberNumber
      };
      if (!memberData.registrationDate) {
        memberData.registrationDate = /* @__PURE__ */ new Date();
      }
      const member = await storage.createMember(memberData);
      res.status(201).json({
        id: member.id,
        memberNumber: member.memberNumber,
        firstName: member.firstName,
        lastName: member.lastName
      });
    } catch (error) {
      console.error("Error creating member:", error);
      res.status(500).json({ error: "Failed to create member" });
    }
  });
  app2.put("/api/members/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ error: "Invalid ID format" });
      }
      const validationResult = insertMemberSchema.partial().safeParse(req.body);
      if (!validationResult.success) {
        const errorMessage = fromZodError(validationResult.error).message;
        return res.status(400).json({ error: errorMessage });
      }
      const member = await storage.getMember(id);
      if (!member) {
        return res.status(404).json({ error: "Member not found" });
      }
      const updatedMember = await storage.updateMember(id, validationResult.data);
      res.json(updatedMember);
    } catch (error) {
      console.error("Error updating member:", error);
      res.status(500).json({ error: "Failed to update member" });
    }
  });
  app2.delete("/api/members/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ error: "Invalid ID format" });
      }
      const member = await storage.getMember(id);
      if (!member) {
        return res.status(404).json({ error: "Member not found" });
      }
      await storage.deleteMember(id);
      res.status(204).end();
    } catch (error) {
      console.error("Error deleting member:", error);
      res.status(500).json({ error: "Failed to delete member" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2, { dirname as dirname2 } from "path";
import { fileURLToPath as fileURLToPath2 } from "url";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path, { dirname } from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";
var __filename = fileURLToPath(import.meta.url);
var __dirname = dirname(__filename);
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    themePlugin(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared")
    }
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var __filename2 = fileURLToPath2(import.meta.url);
var __dirname2 = dirname2(__filename2);
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        __dirname2,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(__dirname2, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();